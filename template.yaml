AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  axis-lunch

# CFN parameters:
Parameters:
  RoleName:
    Type: String
    Default: ScraperLambdaRole
    Description: The name of the IAM role used by the scraper
  HTMLBucketName:
    Type: String
    Default: bucket
    Description: Name of the S3 bucket for hosting the static website
  DDBTableName:
    Type: String
    Default: tablename
    Description: The name of the DynamoDB table for storing parsed menus
  DDBTTLEnabled:
    Type: String
    Default: false
    Description: TTL enabled or disabled on DynamoDB entries
    AllowedValues:
      - true
      - false
  CloudfrontDistribution:
    Type: String
    Default: false
    Description: Choose TRUE if there is an active Cloudfront distribution to restrict bucket access to the Origin Access Idenity. If FALSE, bucket read access is PUBLIC
    AllowedValues:
      - true
      - false
  CloudfrontOriginAccessId:
    Type: String
    Description: The OAI for a Cloudfront distribution, restricts S3 access to Cloudfront only if CloudfrontEnabled is TRUE. Leave blank if no Cloudfront
    Default: ""
    AllowedPattern: ^[A-Z0-9]*$

Conditions:
  CloudfrontEnabled:
    !Equals
      - !Ref CloudfrontDistribution
      - true

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 60

Resources:
  AxisLunchServerlessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref RoleName
      Description: The IAM role allowing the Axis Lunch scraper to function
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: DdbS3Permissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                Resource:
                  - !GetAtt LunchTable.Arn
                  - !Join
                    - ""
                    - - !GetAtt LunchTable.Arn
                      - "/*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  !Join
                  - ""
                  - - !GetAtt HTMLS3Bucket.Arn
                    - "/*"
  LunchTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DDBTableName
      AttributeDefinitions:
        - AttributeName: "restaurant"
          AttributeType: "S"
        - AttributeName: "fetchDate"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "restaurant"
          KeyType: HASH
        - AttributeName: "fetchDate"
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: !Ref DDBTTLEnabled
      GlobalSecondaryIndexes:
        - IndexName: sortByDate
          KeySchema:
          - AttributeName: "restaurant"
            KeyType: HASH
          - AttributeName: "fetchDate"
            KeyType: RANGE
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
              - mon
              - tue
              - wed
              - thu
              - fri

  HTMLS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref HTMLBucketName
      WebsiteConfiguration:
        IndexDocument: index.html

  BucketWebsitePolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref HTMLS3Bucket
      PolicyDocument:
        Statement:
        - Sid: PublicReadGetObjectForWebsite
          Effect: Allow
          Principal:
            !If
              - CloudfrontEnabled
              - AWS:
                  !Join
                    - ""
                    - - "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity "
                      - !Ref CloudfrontOriginAccessId
              - "*"
          Action: s3:GetObject
          Resource:
            !Join
            - ""
            - - !GetAtt HTMLS3Bucket.Arn
              - "/*"

  LayerDependencies:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: dependencies/
      CompatibleRuntimes:
        - python3.8
    Metadata:
      BuildMethod: python3.8

  HTMLGeneratorFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: html_generator/
      Handler: main.handler
      Runtime: python3.8
      Role: !GetAtt AxisLunchServerlessRole.Arn
      Layers:
        - !Ref LayerDependencies
      Environment:
        Variables:
          S3_BUCKET: !Ref HTMLS3Bucket
          TABLE_NAME: !Ref DDBTableName
          INDEX_TEMPLATE_PATH: html_templates/index_template.html
          MENU_TEMPLATE_PATH: html_templates/row_template.html
          OUTPUT_PATH: html/index.html
          LOGLEVEL: INFO

  ScraperFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: scraper/
      Handler: main.handler
      Runtime: python3.8
      Role: !GetAtt AxisLunchServerlessRole.Arn
      Layers:
        - !Ref LayerDependencies
      Environment:
        Variables:
          TABLE_NAME: !Ref DDBTableName
          LOGLEVEL: INFO

  BucketCleanup:
    Type: AWS::Serverless::Function # Helper function to empty S3 bucket on CFN stack delete
    Properties:
      CodeUri: bucket_cleanup/
      Handler: main.handler
      Runtime: python3.8
      Role: !GetAtt AxisLunchServerlessRole.Arn
      Environment:
        Variables:
          LOGLEVEL: INFO

  BucketCleanupOnDelete:
    Type: Custom::BucketCleanup
    Properties:
      ServiceToken: !GetAtt BucketCleanup.Arn
      BucketName: !Ref HTMLS3Bucket

  Statemachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachine/scrapeAndGenerate.asl.json
      DefinitionSubstitutions:
        ScraperFunctionArn: !GetAtt ScraperFunction.Arn
        HTMLGeneratorFunctionArn: !GetAtt HTMLGeneratorFunction.Arn
      Events:
        StatemachineInterval:
          Type: Schedule
          Properties:
            Description: Defines the interval for how often the statemachine should run
            Enabled: True
            Schedule: "cron(0/20 9-12 ? * mon-fri *)"
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref ScraperFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref HTMLGeneratorFunction

Outputs:
  S3WebsiteUrl:
    Description: The URL for the S3 website
    Value: !GetAtt HTMLS3Bucket.WebsiteURL
  AxisLunchServerlessRole:
    Description: Role created for Axis Lunch scraper
    Value: !GetAtt AxisLunchServerlessRole.Arn
  StatemachineArn:
    Description: The ARN of the scraper statemachine ARN
    Value: !Ref Statemachine
