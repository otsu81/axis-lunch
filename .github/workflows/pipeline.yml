name: BuildAndDeploy

on:
  push:
    branches: [ dev ]
  pull_request:
    types: [ closed ]
    branches: [ master ]

jobs:

  lint:
    runs-on: ubuntu-latest

    steps:

    - uses: actions/checkout@v2

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Lint Cloudformation template
      uses: scottbrenner/cfn-lint-action@master
      with:
        args: "**/*.yaml"

  sam:

    runs-on: ubuntu-latest

    steps:
    - name: checkout master
      uses: actions/checkout@v2
      if: github.base_ref == 'master'
      with:
        ref: master

    - name: checkout referencing branch
      if: github.base_ref != 'master'
      uses: actions/checkout@v2

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Test with pytest
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        python -m pytest tests/ -v

    - name: Configure AWS credentials
      id: creds
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.SANDBOX_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.SANDBOX_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.DEFAULT_REGION }}

    - name: if master set PROD env variables
      if: github.ref == 'refs/heads/master'
      run: |
        echo "BUCKET=${{ secrets.BUCKET }}" >> $GITHUB_ENV
        echo "STACK_NAME=${{ secrets.STACK_NAME }}" >> $GITHUB_ENV
        echo "DDB_TABLE=${{ secrets.DDB_TABLE }}" >> $GITHUB_ENV
        echo "ROLENAME=${{ secrets.ROLENAME }}" >> $GITHUB_ENV
        echo "CLOUDFRONT_DISTRIBUTION=true" >> $GITHUB_ENV
        echo "CLOUDFRONT_OAI=${{ secrets.CLOUDFRONT_OAI }}" >> $GITHUB_ENV

    - name: if dev set DEV env variables
      if: github.ref == 'refs/heads/dev'
      run: |
        echo "BUCKET=${{ secrets.BUCKET_DEV }}" >> $GITHUB_ENV
        echo "STACK_NAME=${{ secrets.STACK_NAME_DEV }}" >> $GITHUB_ENV
        echo "DDB_TABLE=${{ secrets.DDB_TABLE_DEV }}" >> $GITHUB_ENV
        echo "ROLENAME=${{ secrets.ROLENAME_DEV }}" >> $GITHUB_ENV
        echo "CLOUDFRONT_DISTRIBUTION=false" >> $GITHUB_ENV
        echo "CLOUDFRONT_OAI=${{ secrets.CLOUDFRONT_OAI }}" >> $GITHUB_ENV

    - name: SAM build
      env:
        SAM_CLI_TELEMETRY: 0
      run: |
        sam build --use-container

    - name: SAM deploy
      env:
        SAM_CLI_TELEMETRY: 0
        SAM_BUCKET: ${{ secrets.SAM_S3_BUCKET }}
      run: |
        sam deploy \
          --no-fail-on-empty-changeset \
          --stack-name ${{ env.STACK_NAME }} \
          --s3-bucket ${{ env.SAM_BUCKET }} \
          --capabilities CAPABILITY_NAMED_IAM \
          --parameter-overrides \
              RoleName=${{ env.ROLENAME }} \
              HTMLBucketName=${{ env.BUCKET }} \
              CloudfrontDistribution=${{ env.CLOUDFRONT_DISTRIBUTION }} \
              CloudfrontOriginAccessId=${{ env.CLOUDFRONT_OAI }} \
              DDBTableName=${{ env.DDB_TABLE }}

    - name: Copy HTML files
      run: |
        aws s3 sync html/ s3://${{ env.BUCKET }}

    - name: Run and check stepfunction
      run: |
        chmod +x statemachine/checkStepFunction.sh
        statemachine/checkStepFunction.sh

    - name: If Cloudfront enabled check for files changed last 15 minutes
      if: env.CLOUDFRONT_DISTRIBUTION == 'true'
      run: |
        MINUTES_AGO=$(date --date='15 minutes ago' +%Y-%m-%dT%T+00:00)
        aws s3api list-objects-v2 \
          --bucket ${{ secrets.BUCKET }} \
          --query 'Contents[?LastModified > `'$MINUTES_AGO'`]' > files_inventory.json
        echo "NBR_FILES=$(jq '. | length' files_inventory.json)" >> $GITHUB_ENV

    - name: If new files, invalidate them in Cloudfront
      if: env.CLOUDFRONT_DISTRIBUTION == 'true' && env.NBR_FILES != 0
      run: |
        cat files_inventory.json | jq --arg NBR_FILES $NBR_FILES '. | {"Paths": { "Quantity": $NBR_FILES|tonumber, "Items": (["/" + .[].Key])}, "CallerReference": "GithubActionsInvalidation"}' > invalidations.json
        aws cloudfront create-invalidation \
          --distribution-id ${{ secrets.CLOUDFRONT_ID }} \
          --invalidation-batch file://invalidations.json