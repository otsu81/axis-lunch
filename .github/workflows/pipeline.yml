name: AxisLunchDevBranch

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ master ]

jobs:

  lint:
    runs-on: ubuntu-latest

    steps:

    - uses: actions/checkout@v2

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Lint Cloudformation template
      uses: scottbrenner/cfn-lint-action@master
      with:
        args: "**/*.yaml"

  sam:
    runs-on: ubuntu-latest

    steps:

    - uses: actions/checkout@v2

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Configure AWS credentials
      id: creds
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.SANDBOX_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.SANDBOX_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.DEFAULT_REGION }}

    - name: set DEV ENV variables
      if: github.ref == 'refs/heads/dev'
      run: |
        echo "::set-env name=BUCKET::${{ secrets.BUCKET_DEV }}"
        echo "::set-env name=STACK_NAME::${{ secrets.STACK_NAME_DEV }}"
        echo "::set-env name=DDB_TABLE::${{ secrets.DDB_TABLE_DEV }}"
        echo "::set-env name=ROLENAME::${{ secrets.ROLENAME_DEV }}"
        echo "::set-env name=CLOUDFRONT_DISTRIBUTION::false"
        echo "::set-env name=CLOUDFRONT_OAI::"

    - name: set MASTER ENV variables
      if: github.ref == 'refs/heads/master'
      run: |
        echo "::set-env name=BUCKET::${{ secrets.BUCKET }}"
        echo "::set-env name=STACK_NAME::${{ secrets.STACK_NAME }}"
        echo "::set-env name=DDB_TABLE::${{ secrets.DDB_TABLE }}"
        echo "::set-env name=ROLENAME::${{ secrets.ROLENAME }}"
        echo "::set-env name=CLOUDFRONT_DISTRIBUTION::true"
        echo "::set-env name=CLOUDFRONT_OAI::${{ secrets.CLOUDFRONT_OAI }}"


    - name: SAM build
      env:
        SAM_CLI_TELEMETRY: 0
      run: |
        sam build --use-container

    - name: SAM deploy
      env:
        SAM_CLI_TELEMETRY: 0
      run: |
        sam deploy \
          --no-fail-on-empty-changeset \
          --stack-name $STACK_NAME \
          --parameter-overrides \
              RoleName=$ROLENAME \
              HTMLBucketName=$BUCKET \
              CloudfrontDistribution=$CLOUDFRONT_DISTRIBUTION \
              DDBTableName=$DDB_TABLE

    - name: Copy HTML files
      run: |
        aws s3 sync html/ s3://$BUCKET

    - name: Run stepfunction
      run: |
        echo $STACK_NAME
        ARN=$(aws cloudformation describe-stacks --query 'Stacks[?StackName==`$STACK_NAME`].[Outputs[?OutputKey==`StatemachineArn`].OutputValue]' --output text)
        aws stepfunctions start-execution --state-machine-arn $ARN